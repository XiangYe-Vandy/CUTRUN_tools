


def get_para(configfile):

    with open(configfile) as f:

        for line in f:
            line.rstrip()
            m = re.match(r"(Threads):(\d+)", line)
            idx = re.match(r"^(Index):(.*)$", line)
            outdir = re.match(r"(Output_dir):(.*)$", line)
            trim = re.match(r"(TrimGalore):(.*)$", line)
            align = re.match(r"(Alignment_dir):(.*)$", line)
            pairend = re.match(r"(PAIREND):(.*)$", line)
            trimmed = re.match(r"(Trimmed_dir):(.*)$", line)
            fastqdir = re.match(r"(Fastq_dir):(.*)", line)
            cutadapt = re.match(r"(Cutadapt):(.*)", line)
            fastqc = re.match(r"(FastQC_dir):(.*)", line)
            bowtie2 = re.match(r"(Bowtie2):(.*)", line)
            genome = re.match(r"(GENOME):(.*)", line)
            macs2 = re.match(r"(Macs2_output):(.*)", line)
            macs2_bin = re.match(r"(Macs2_dir):(.*)", line)
            idr = re.match(r"(IDR_dir):(.*)", line)
            if m:
                thread_num = m.group(2)
            elif idx:
                align_idx = idx.group(2)
            elif outdir:
                out_dir = outdir.group(2)
            elif trim:
                trimmer_dir = trim.group(2)
            elif align:
                alignment_dir = align.group(2)
            elif pairend:
                pair_end = pairend.group(2)
            elif trimmed:
                trimmed_dir = trimmed.group(2)
            elif fastqdir:
                fastq_dir = fastqdir.group(2)
            elif cutadapt:
                cutadapt_dir = cutadapt.group(2)
            elif fastqc:
                fastqc_dir = fastqc.group(2)
            elif bowtie2:
                bowtie2_dir = bowtie2.group(2)
            elif genome:
                genome_file = genome.group(2)
            elif macs2:
                macs2_output_dir = macs2.group(2)
            elif idr:
                IDR_dir = idr.group(2)
            elif macs2_bin:
                macs2_dir = macs2_bin.group(2)

    return thread_num, align_idx, out_dir, trimmer_dir, alignment_dir, pair_end, trimmed_dir, fastq_dir, cutadapt_dir, fastq_dir, bowtie2_dir, genome_file, macs2_output_dir, IDR_dir, macs2_dir


def get_fastq(configfile):

    with open(configfile) as f:
        files = []
        for line in f:
            line.rstrip()
            fq = re.match(r"^(.*fastq\.gz$)", line)
            if fq:
                file = fq.group(1)
                files.append(file)

    return files


def rank_superenhancers(sample, bamfiles, bamfile_control, bed, out_dir):
    print(sample, bamfiles, bamfile_control, bed)
    control_Wpath = os.path.join(out_dir, "control_tag")
    subprocess.run(["makeTagDirectory", sample] + bamfiles)
    subprocess.run(["makeTagDirectory", control_Wpath, bamfile_control])
    print(sample, bamfiles, bamfile_control, bed, out_dir)
    subprocess.run(["findPeaks", sample, "-i", control_Wpath, "-style", "super", "-size", "1000", "-superSlope", "1", "-superWindow", "15", "-o", "".join([sample, ".SE.txt"]), "-typical", "".join([sample, ".typical.txt"]), "-inputPeaks", bed])
